/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package oodjassignment;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Lim Ee Chian
 */
public class ManageSaleOrderPage extends javax.swing.JFrame {
    
    
    public String selectedSaleOrderNo;  // Public variable to store the selectedSaleOrderNo
    // Define Delivery Status options for the cbDeliveryStatus JComboBox
    String[] deliveryStatusOptions = {"", "Pending", "Ready for Delivery", "Delivered"};
    // Define Order Status otpions for the cbOrderStatus JComboBox
    String[] orderStatusOptions = {"", "Unapproved", "Approved", "Closed"};
    
    // Define Product Status options for the cbProductStatus JComboBox
    String[] productStatusOptions = {"", "Pending", "In Progress", "Work Done"};
    
    // Method to set the Sale Order No.
    public void setSaleOrderNo(String selectedSaleOrderNo) {
        this.selectedSaleOrderNo = selectedSaleOrderNo;
    }
            
            
            
    /**
     * Creates new form ManageSaleOrder
     */
    public ManageSaleOrderPage() {
        initComponents();
        
        // Set the location of the JFrame form to be centered on the screen
        setLocationRelativeTo(null);
        
        // Set up the custom close operation
        setupCloseOperation();
        
        UserUtilityClass.displayUsername(tfUsername);
        // Make the tfUsername field uneditable and not focusable
        tfUsername.setEditable(false);
        tfUsername.setFocusable(false);
        
        tfSaleOrderNo.setEditable(false);
        tfSaleOrderNo.setFocusable(false);
        
        tfPurchaseOrderNo.setEditable(false);
        tfPurchaseOrderNo.setFocusable(false);
        
        tfPurchaseOrderDate.setEditable(false);
        tfPurchaseOrderDate.setFocusable(false);
        
        tfSubtotal.setEditable(false);
        tfSubtotal.setFocusable(false);
        
        tfDiscount.setEditable(false);
        tfDiscount.setFocusable(false);
        
        tfDeliveryFee.setEditable(false);
        tfDeliveryFee.setFocusable(false);
        
        tfTotalAmount.setEditable(false);
        tfTotalAmount.setFocusable(false);
        
        tfInvoiceNo.setEditable(false);
        tfInvoiceNo.setFocusable(false);

        cbProductStatus.setModel(new DefaultComboBoxModel<>(productStatusOptions));
  
        cbDeliveryStatus.setModel(new DefaultComboBoxModel<>(deliveryStatusOptions));
    
        cbOrderStatus.setModel(new DefaultComboBoxModel<>(orderStatusOptions));
    }
    
    // Override the windowClosing event
    private void formWindowClosing(java.awt.event.WindowEvent evt) {
        // Close only this page
        this.dispose();
    }
    // Add this method to set up the custom close operation

    private void setupCloseOperation() {
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        tfUsername = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbSelectedProduct = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        tfPurchaseOrderNo = new javax.swing.JTextField();
        tfSubtotal = new javax.swing.JTextField();
        tfDiscount = new javax.swing.JTextField();
        tfDeliveryFee = new javax.swing.JTextField();
        tfTotalAmount = new javax.swing.JTextField();
        tfPurchaseOrderDate = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();
        tfSaleOrderNo = new javax.swing.JTextField();
        tfQuotationID = new javax.swing.JTextField();
        tfSalespersonID = new javax.swing.JTextField();
        tfCustomerName = new javax.swing.JTextField();
        tfCustomerPhoneNo = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        taDeliveryAddress = new javax.swing.JTextArea();
        btnGenerateInvoice = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        dcDeliveryDate = new com.toedter.calendar.JDateChooser();
        dcCompletedDate = new com.toedter.calendar.JDateChooser();
        jLabel17 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        cbProductStatus = new javax.swing.JComboBox<>();
        cbOrderStatus = new javax.swing.JComboBox<>();
        jLabel15 = new javax.swing.JLabel();
        cbDeliveryStatus = new javax.swing.JComboBox<>();
        jLabel14 = new javax.swing.JLabel();
        tfInvoiceNo = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(0, 102, 102));

        tfUsername.setEditable(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(tfUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(tfUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(46, Short.MAX_VALUE))
        );

        jLabel1.setText("Manage Sale Order");

        jPanel3.setBackground(new java.awt.Color(204, 204, 204));

        tbSelectedProduct.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Product ID", "Type", "Name", "Unit Price", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tbSelectedProduct);

        jLabel8.setText("Purchase Order No.");

        jLabel9.setText("Purchase Order Date");

        jLabel10.setText("Subtotal (RM)");

        jLabel11.setText("Discount (%)");

        jLabel12.setText("Delivery Fee (RM)");

        jLabel13.setText("Total Amount (RM)");

        tfPurchaseOrderNo.setEditable(false);

        tfSubtotal.setEditable(false);

        tfDiscount.setEditable(false);

        tfDeliveryFee.setEditable(false);

        tfTotalAmount.setEditable(false);

        tfPurchaseOrderDate.setEditable(false);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tfPurchaseOrderNo, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                            .addComponent(tfPurchaseOrderDate))
                        .addGap(90, 90, 90)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tfSubtotal)
                            .addComponent(tfDiscount, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addGap(18, 18, 18)
                                .addComponent(tfTotalAmount))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addGap(18, 18, 18)
                                .addComponent(tfDeliveryFee, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(72, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel10)
                    .addComponent(tfPurchaseOrderNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfSubtotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel11)
                    .addComponent(tfDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfPurchaseOrderDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(tfDeliveryFee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(tfTotalAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        jLabel2.setText("Sale Order No.");

        jLabel3.setText("Quotation ID");

        jLabel4.setText("Salesperson ID");

        jLabel5.setText("Customer Name");

        jLabel6.setText("Customer Phone No.");

        jLabel7.setText("Delivery Address");

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        tfSaleOrderNo.setEditable(false);

        tfQuotationID.setEditable(false);

        taDeliveryAddress.setColumns(20);
        taDeliveryAddress.setRows(5);
        jScrollPane2.setViewportView(taDeliveryAddress);

        btnGenerateInvoice.setText("Generate Invoice");
        btnGenerateInvoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateInvoiceActionPerformed(evt);
            }
        });

        jLabel18.setText("Delivery Date");

        jLabel17.setText("Completed Date");

        jLabel16.setText("Product Status");

        cbProductStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cbOrderStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel15.setText("Order Status");

        cbDeliveryStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel14.setText("Delivery Status");

        tfInvoiceNo.setEditable(false);

        jLabel19.setText("Invoice No.");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(tfSaleOrderNo)
                                    .addComponent(tfQuotationID)
                                    .addComponent(tfSalespersonID, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tfCustomerName))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(tfCustomerPhoneNo, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE))
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(433, 433, 433)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dcCompletedDate, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(474, 474, 474))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(306, 306, 306)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbProductStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(140, 140, 140)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(60, 60, 60)
                                .addComponent(btnGenerateInvoice)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cbOrderStatus, 0, 129, Short.MAX_VALUE)
                            .addComponent(cbDeliveryStatus, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(313, 313, 313)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tfInvoiceNo)
                            .addComponent(dcDeliveryDate, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE))))
                .addGap(0, 101, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(tfSaleOrderNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(tfQuotationID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(tfSalespersonID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(tfCustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(tfCustomerPhoneNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel16)
                            .addComponent(cbProductStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14)
                            .addComponent(cbDeliveryStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel17)
                    .addComponent(dcCompletedDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel15)
                        .addComponent(cbOrderStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel18)
                    .addComponent(dcDeliveryDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfInvoiceNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGenerateInvoice)
                    .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(220, 220, 220))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // After clicking btnConfirmSaleOrder button, direct to this page, 
    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // After clicking btnConfirmSaleOrder button, direct to this page, 
        // and user need to click btnSave button to really save all the data to SaleOrdersTable.txt and 2ndSaleOrdersTable.txt
        // either the user wants to Create new sale order record or Save modified sale order record

        String oldSaleOrderNo = tfSaleOrderNo.getText();
        String generatedSaleOrderNo = null;
        
        String quotationID = tfQuotationID.getText();
        String userID = tfSalespersonID.getText();
        String customerName = tfCustomerName.getText();
        String customerPhoneNo = tfCustomerPhoneNo.getText();
        String deliveryAddress = taDeliveryAddress.getText();

        String purchaseOrderNo = tfPurchaseOrderNo.getText();
        String purchaseOrderDate = tfPurchaseOrderDate.getText();
        String subtotal = tfSubtotal.getText();
        String discount = tfDiscount.getText();
        String deliveryFee = tfDeliveryFee.getText();
        String totalAmount = tfTotalAmount.getText();
        
        String productStatus = (String) cbProductStatus.getSelectedItem();
        Date completedDate = dcCompletedDate.getDate();
        Date deliveryDate = dcDeliveryDate.getDate();
        String invoiceNo = tfInvoiceNo.getText();
        String deliveryStatus = (String) cbDeliveryStatus.getSelectedItem();
        String orderStatus = (String) cbOrderStatus.getSelectedItem();
        
        DefaultTableModel model = (DefaultTableModel) tbSelectedProduct.getModel();
        
        // Check if fields are filled
        if (quotationID.isEmpty() || userID.isEmpty() || customerName.isEmpty() || customerPhoneNo.isEmpty() || deliveryAddress.isEmpty() ||
                purchaseOrderNo.isEmpty() || purchaseOrderDate.isEmpty() || subtotal.isEmpty() || discount.isEmpty() || deliveryFee.isEmpty() || totalAmount.isEmpty() || 
                productStatus.isEmpty() || completedDate == null || deliveryDate == null || deliveryStatus.isEmpty() || orderStatus.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill up all fields.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        } else if (model.getRowCount() == 0) {
            // The JTable has no rows
            JOptionPane.showMessageDialog(this, "The table has no data.", "No Data", JOptionPane.INFORMATION_MESSAGE);
            return;
        } else {
            // Check if the tfSaleOrderNo text field is empty
            if (oldSaleOrderNo.isEmpty()) {
                // Generate the SaleOrderNo for the new Sale Order record
                // if sale order no text field empty, once click save, then generate the sale order no.
                generatedSaleOrderNo = generateSaleOrderNo();
                
                // Set the generated Sale Order No in the tfSaleOrderNo text field
                tfSaleOrderNo.setText(generatedSaleOrderNo);
                
                if (invoiceNo.isEmpty()) {
                    tfInvoiceNo.setText("_");  // Set a placeholder value
                }
            } 
        }
        
        boolean modifiedSaleOrder = false;
        String saleOrderNo = tfSaleOrderNo.getText();  // the new one
   
        // Read the contents of the file and modify the specific line(s) based on Purchase Order No.
        try (BufferedReader br1 = new BufferedReader(new FileReader("SaleOrdersTable.txt"))) {
            //List<String> lines1 = new ArrayList<>();
            //boolean modified1 = false;
            
            String line1;
            boolean firstLine = true;
            
            while ((line1 = br1.readLine()) != null) {
                
                String[] rowInFile1 = line1.split(";");
                if (rowInFile1.length != 23) {
                    continue;
                }
                
                String existingSaleOrderNo1 = rowInFile1[0].trim();
                
                if ((existingSaleOrderNo1.equals(saleOrderNo))) {
                    modifiedSaleOrder = true;
                    if (modifiedSaleOrder) {
                        modifyOldSaleOrder();
                    }
                }
            }
        } catch (IOException e) {
            System.out.println("Error reading SaleOrdersTable.txt file: " + e.getMessage());
        }
        
        if (!modifiedSaleOrder) {
            try {
                createNewSaleOrder();
            } catch (IOException e) {
                System.out.println("Error executing createNewSaleOrder() method: " + e.getMessage());
                
            }
        }
            
        
    
              
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnGenerateInvoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateInvoiceActionPerformed
        //
        
        String generatedInvoiceNo = "";
        
        String invoiceNo = tfInvoiceNo.getText();
        
        try {
        // Check if the tfInvoiceNo text field is empty
            if (invoiceNo.isEmpty()) {
                // Generate the InvoiceNo
                generatedInvoiceNo = generateInvoiceNo();
                
                // Set the generated InvoiceNo in the tfInvoiceNo text field
                tfInvoiceNo.setText(generatedInvoiceNo);
                
            } 

        } catch (NullPointerException e) {
            System.out.println("NullPointerException occured during creating a new Sale Order: " + e.getMessage());
        }
    }//GEN-LAST:event_btnGenerateInvoiceActionPerformed

   
    private void createNewSaleOrder() throws IOException {
    
        String oldSaleOrderNo = tfSaleOrderNo.getText();
        String generatedSaleOrderNo = "";
        
        String quotationID = tfQuotationID.getText();
        String userID = tfSalespersonID.getText();
        String customerName = tfCustomerName.getText();
        String customerPhoneNo = tfCustomerPhoneNo.getText();
        String deliveryAddress = taDeliveryAddress.getText();
        
        
        String purchaseOrderNo = tfPurchaseOrderNo.getText();
        String purchaseOrderDate = tfPurchaseOrderDate.getText();
        String subtotal = tfSubtotal.getText();
        String discount = tfDiscount.getText();
        String deliveryFee = tfDeliveryFee.getText();
        String totalAmount = tfTotalAmount.getText();
        
        String productStatus = (String) cbProductStatus.getSelectedItem();
        Date completedDate = dcCompletedDate.getDate();
        Date deliveryDate = dcDeliveryDate.getDate();
        String invoiceNo = tfInvoiceNo.getText();
        String deliveryStatus = (String) cbDeliveryStatus.getSelectedItem();
        String orderStatus = (String) cbOrderStatus.getSelectedItem();
        
        DefaultTableModel model = (DefaultTableModel) tbSelectedProduct.getModel();                

        
        try {
            
            // Check if the tfSaleOrderNo text field is empty
            if (oldSaleOrderNo.isEmpty()) {
                // Generate the SaleOrderNo for the new Sale Order record
                // if sale order no text field empty, once click save, then generate the sale order no.
                generatedSaleOrderNo = generateSaleOrderNo();

                // Set the generated Sale Order No in the tfSaleOrderNo text field
                tfSaleOrderNo.setText(generatedSaleOrderNo);

                if (invoiceNo.isEmpty()) {
                    tfInvoiceNo.setText("_");  // Set a placeholder value
                }
            } 
            
  
        String saleOrderNo = tfSaleOrderNo.getText();  // the new one
        String currentInvoiceNo = tfInvoiceNo.getText();
        
        // Change from Date to String datatype for the DateChooser
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
        String completedDateString = dateFormat.format(completedDate);
        String deliveryDateString = dateFormat.format(deliveryDate);

        // Save to SaleOrdersTable.txt file 
        
            // Write the new contents to the SaleOrdersTable.txt file
            try (BufferedWriter bw1 = new BufferedWriter(new FileWriter("SaleOrdersTable.txt", true))) {    
                
                // Get selected products data to the lines list 
                int rowCount = model.getRowCount();
                
                // Get value of the selected products from the tbSelectedProduct table
                for (int i = 0; i < rowCount; i++) {
                    String productID = model.getValueAt(i, 0).toString();
                    String productType = model.getValueAt(i, 1).toString();
                    String productName = model.getValueAt(i, 2).toString();
                    String productUnitPrice = model.getValueAt(i, 3).toString();
                    String quantity = model.getValueAt(i, 4).toString(); 

                    String[] rowCreateNewData1 = {saleOrderNo,quotationID,userID,customerName,customerPhoneNo,deliveryAddress,
                        purchaseOrderNo,purchaseOrderDate,productID,productType,productName,productUnitPrice,quantity,subtotal,discount,deliveryFee,totalAmount,
                        productStatus,completedDateString,deliveryDateString,deliveryStatus,orderStatus,currentInvoiceNo};
                    String rowCNData1 = String.join(";", rowCreateNewData1);
                    bw1.write(rowCNData1);
                    bw1.newLine();
                }
                
              
            } catch (IOException e) {
                System.out.println("IOException occured during writing to SaleOrdersTable.txt: " + e.getMessage());
            }
             
            
        // Save to 2ndSaleOrdersTable.txt file
            
            // Write the new contents to the 2ndSaleOrdersTable.txt file
            try (BufferedWriter bw2 = new BufferedWriter(new FileWriter("2ndSaleOrdersTable.txt", true))) {
                // Sale Order without product rows
                String[] rowCreateNewData2 = {saleOrderNo,purchaseOrderNo,purchaseOrderDate,userID,customerName,customerPhoneNo,
                    totalAmount,productStatus,completedDateString,deliveryDateString,deliveryStatus,orderStatus};
                    String rowCNData2 = String.join(";", rowCreateNewData2);
                    bw2.write(rowCNData2);
                    bw2.newLine();
                    
                    JOptionPane.showMessageDialog(rootPane, "New Sale Order is created successfully!");
                    
                    // Navigate to the SaleOrdersListPage
                    SwingUtilities.invokeLater(() -> {
                        SaleOrdersListPage saleOrdersList = new SaleOrdersListPage();
                        saleOrdersList.load2ndSaleOrdersTableData();  // Reload data in SaleOrdersListPage
                        saleOrdersList.setVisible(true);
                        this.dispose();  // Dispose of ManageSaleOrderPage 
                    });
                
            } catch (IOException e) {
                System.out.println("IOException occured during writing to 2ndSaleOrdersTable.txt: " + e.getMessage());
            }
        } catch (NullPointerException e) {
            System.out.println("NullPointerException occured during creating a new Sale Order: " + e.getMessage());
        }
    
    }
    
    
    private void modifyOldSaleOrder() {
        String oldSaleOrderNo = tfSaleOrderNo.getText();
        String quotationID = tfQuotationID.getText();
        String userID = tfSalespersonID.getText();
        String customerName = tfCustomerName.getText();
        String customerPhoneNo = tfCustomerPhoneNo.getText();
        String deliveryAddress = taDeliveryAddress.getText();
        
        
        String purchaseOrderNo = tfPurchaseOrderNo.getText();
        String purchaseOrderDate = tfPurchaseOrderDate.getText();
        String subtotal = tfSubtotal.getText();
        String discount = tfDiscount.getText();
        String deliveryFee = tfDeliveryFee.getText();
        String totalAmount = tfTotalAmount.getText();
        
        String productStatus = (String) cbProductStatus.getSelectedItem();
        Date completedDate = dcCompletedDate.getDate();
        Date deliveryDate = dcDeliveryDate.getDate();
        String deliveryStatus = (String) cbDeliveryStatus.getSelectedItem();
        String orderStatus = (String) cbOrderStatus.getSelectedItem();
        
        DefaultTableModel model = (DefaultTableModel) tbSelectedProduct.getModel();
        
        String currentInvoiceNo = tfInvoiceNo.getText();
        
        // Change from Date to String datatype for the DateChooser
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
        String completedDateString = dateFormat.format(completedDate);
        String deliveryDateString = dateFormat.format(deliveryDate);                

        
    // Save to SaleOrdersTable.txt file 
    
        List<String> lines1 = new ArrayList<>();
        boolean modified1 = false;
    
        try (BufferedReader br1 = new BufferedReader(new FileReader("SaleOrdersTable.txt"))) {
            String line1;
            while ((line1 = br1.readLine()) != null) {
                String[] rowInFile1 = line1.split(";");
                if (rowInFile1.length != 23) {
                    continue;
                }
                
                String existingSaleOrderNo1 = rowInFile1[0].trim();
                if (existingSaleOrderNo1.equals(oldSaleOrderNo)) {
                    continue;
                }
                lines1.add(line1);
            }
            
            // Add the modified data to the lines list
            int rowCount = model.getRowCount();
            // Get value of the selected products from the tbSelectedProduct table
            for (int i = 0; i < rowCount; i++) {
                String productID = model.getValueAt(i, 0).toString();
                    String productType = model.getValueAt(i, 1).toString();
                    String productName = model.getValueAt(i, 2).toString();
                    String productUnitPrice = model.getValueAt(i, 3).toString();
                    String quantity = model.getValueAt(i, 4).toString(); 

                    String[] rowModifyData1 = {oldSaleOrderNo,quotationID,userID,customerName,customerPhoneNo,deliveryAddress,
                purchaseOrderNo,purchaseOrderDate,productID,productType,productName,productUnitPrice,quantity,subtotal,discount,deliveryFee,totalAmount,
                productStatus,completedDateString,deliveryDateString,deliveryStatus,orderStatus,currentInvoiceNo};
                    String rowMData1 = String.join(";", rowModifyData1);
                    lines1.add(rowMData1);
                    modified1 = true;
            }
        } catch (IOException e) {
            System.out.println("Error reading SaleOrdersTable.txt file: " + e.getMessage());
        }
        
        // Write the modified contents back to the SaleOrdersTable.txt file
        if (modified1) {
            try (BufferedWriter bw1 = new BufferedWriter(new FileWriter("SaleOrdersTable.txt"))) {
                for (String line : lines1) {
                    bw1.write(line);
                    bw1.newLine();
                }
            } catch (IOException e) {
                System.out.println("IOException occured during writing to SaleOrdersTable.txt: " + e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "No matching Sale Order record found in SaleOrdersTable.txt with the given Sale Order No.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    
    // Save to 2ndSaleOrdersTable.txt file
    
        List<String> lines2 = new ArrayList<>();
        boolean modified2 = false;

        try (BufferedReader br2 = new BufferedReader(new FileReader("2ndSaleOrdersTable.txt"))) {
            String line2;
            
            while ((line2 = br2.readLine()) != null) {
                String[] rowInFile2 = line2.split(";");
                if (rowInFile2.length != 12) {
                    continue;
                }

                String existingSaleOrderNo2 = rowInFile2[0].trim();

                if (existingSaleOrderNo2.equals(oldSaleOrderNo)) {
                    continue;
                    
                } 
                lines2.add(line2);
                
            }
                // Modify the data for the matching Sale Order No in ArrayList
                String[] rowModifyData2 = {oldSaleOrderNo,purchaseOrderNo,purchaseOrderDate,userID,customerName,customerPhoneNo,
                        totalAmount,productStatus,completedDateString,deliveryDateString,deliveryStatus,orderStatus};
                String rowMData2 = String.join(";", rowModifyData2);
                lines2.add(rowMData2);
                modified2 = true;
            
        } catch (IOException e) {
            System.out.println("Error reading 2ndSaleOrdersTable.txt file: " + e.getMessage());
        }
        
        if (modified2) {
            try (BufferedWriter bw2 = new BufferedWriter(new FileWriter("2ndSaleOrdersTable.txt"))) {
                for (String line : lines2) {
                    bw2.write(line);
                    bw2.newLine();
                }
                JOptionPane.showMessageDialog(this, "Modified Sale Order record saved successfully!");
            } catch (IOException e) {
                System.out.println("IOException occured during writing to 2ndSaleOrdersTable.txt: " + e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "No matching Sale Order record found in 2ndSaleOrdersTable.txt with the given Sale Order No.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        
        // Navigate to the SaleOrdersListPage
        SwingUtilities.invokeLater(() -> {
            SaleOrdersListPage saleOrdersList = new SaleOrdersListPage();
            saleOrdersList.load2ndSaleOrdersTableData();  // Reload data in SaleOrdersListPage
            saleOrdersList.setVisible(true);
            this.dispose();  // Dispose of ManageSaleOrderPage 
        });

    }
    
    
    public void setPurchaseOrderInfo(String purchaseOrderNo, String purchaseOrderDate) {
        // Set the Purchase Order information in the text fields
        tfPurchaseOrderNo.setText(purchaseOrderNo);
        
        tfPurchaseOrderDate.setText(purchaseOrderDate);
        
    }
    
    
    // Method to load and display the Sale Order data to each text field and table that just being confirmed
    public void loadQuotationDataDisplayAtSaleOrder(String confirmedSaleOrderQuotationID) throws ParseException {
        
        // Create the table model - Update the table with the select products information
        DefaultTableModel model = (DefaultTableModel) tbSelectedProduct.getModel();
        // Clear existing rows from the table
        model.setRowCount(0);
        
        // Search in QuotationsTable.txt
        try (BufferedReader br = new BufferedReader(new FileReader("QuotationsTable.txt"))) {
            String line;
            boolean firstLine = true;
            
            while ((line = br.readLine()) != null) {
                if (firstLine) {
                    firstLine = false;
                    continue;  
                }
                String[] col = line.split(";"); 
                if (col.length >= 16) {
                    String quotationID = col[0].trim();
                    if (quotationID.equals(confirmedSaleOrderQuotationID)) {
                        // Match found, extract relevant informaiton
                        // Repeated
                        String userID = col[3].trim();
                        String customerName = col[4].trim();
                        String customerPhoneNo = col[5].trim();
                        String deliveryAddress = col[6].trim();
                        String subtotal = col[12].trim();
                        String discount = col[13].trim();
                        String deliveryFee = col[14].trim();
                        String totalAmount = col[15].trim();
                                                
                        // not repeated
                        String productID = col[7].trim();
                        String productType = col[8].trim();
                        String productName = col[9].trim();
                        String productUnitPrice = col[10].trim();
                        String quantity = col[11].trim();
                        
                        // Assign the extracted information to respective text fields, date choosers and table
                        tfQuotationID.setText(confirmedSaleOrderQuotationID);
                        tfSalespersonID.setText(userID);
                        tfCustomerName.setText(customerName);
                        tfCustomerPhoneNo.setText(customerPhoneNo);
                        taDeliveryAddress.setText(deliveryAddress);
                        
                        tfSubtotal.setText(subtotal);
                        tfDiscount.setText(discount);
                        tfDeliveryFee.setText(deliveryFee);
                        tfTotalAmount.setText(totalAmount);
                        
                        // Add a new row to the table with the selected products information
                        Object[] rowData = {productID,productType,productName,productUnitPrice,quantity};
                        model.addRow(rowData);
                    }
                }
            }
        } catch (IOException e) {
            System.out.println("IOException occured during loading old Quotation data: " + e.getMessage());
        }

    } 
    
    // Method to load and display the old Sale Order data to each text field and table
    public void loadOldSaleOrderData(String selectedSaleOrderNo) throws ParseException {
       
        // Create the table model - Update the table with the selected products information
        DefaultTableModel model = (DefaultTableModel) tbSelectedProduct.getModel();
        // Clear existing rows from the table
        model.setRowCount(0);
        
        // Search in SaleOrdersTable.txt
        try (BufferedReader br = new BufferedReader(new FileReader("SaleOrdersTable.txt"))) {
            String line;
            boolean firstLine = true;
            
            while ((line = br.readLine()) != null) {
                if (firstLine) {
                    firstLine = false;
                    continue;  
                }
                
                String[] col = line.split(";"); 
                if (col.length >= 23) {
                    String saleOrderNo = col[0].trim();
                    if (saleOrderNo.equals(selectedSaleOrderNo)) {
                        // Match found, extract relevant information
                        // Repeated
                        String quotationID = col[1].trim();
                        String userID = col[2].trim();
                        String customerName = col[3].trim();
                        String customerPhoneNo = col[4].trim();
                        String deliveryAddress = col[5].trim();
                        String purchaseOrderNo = col[6].trim();
                        String subtotal = col[13].trim();
                        String discount = col[14].trim();
                        String deliveryFee = col[15].trim();
                        String totalAmount = col[16].trim();
                        String invoiceNo = col[22].trim();
                        
                        // Date in String datatype
                        String purchaseOrderDate = col[7].trim();
                        String completedDateString = col[18].trim();
                        String deliveryDateString = col[19].trim();
  
                        // combo box
                        String productStatus = col[17].trim();
                        String deliveryStatus = col[20].trim();
                        String orderStatus = col[21].trim();
                        
                        // Not repeated
                        String productID = col[7].trim();
                        String productType = col[8].trim();
                        String productName = col[9].trim();
                        String productUnitPrice = col[10].trim();
                        String quantity = col[11].trim();
                        
                        // Change back from String to Date datatype for the DateChooser
                        SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
                        Date completedDate = dateFormat.parse(completedDateString);
                        Date deliveryDate = dateFormat.parse(deliveryDateString);
                        
                        // Assign the extracted information to respective text fields, date choosers and table
                        dcCompletedDate.setDate(completedDate);
                        dcDeliveryDate.setDate(deliveryDate);

                        tfSaleOrderNo.setText(selectedSaleOrderNo);
                        tfQuotationID.setText(quotationID);
                        tfSalespersonID.setText(userID);
                        tfCustomerName.setText(customerName);
                        tfCustomerPhoneNo.setText(customerPhoneNo);
                        taDeliveryAddress.setText(deliveryAddress);
                        
                        tfPurchaseOrderNo.setText(purchaseOrderNo);
                        tfPurchaseOrderDate.setText(purchaseOrderDate);
                        
                        tfSubtotal.setText(subtotal);
                        tfDiscount.setText(discount);
                        tfDeliveryFee.setText(deliveryFee);
                        tfTotalAmount.setText(totalAmount);
                        
                        dcCompletedDate.setDate(deliveryDate);
                        dcDeliveryDate.setDate(deliveryDate);
                        tfInvoiceNo.setText(invoiceNo);
                        
                        cbProductStatus.setSelectedItem(productStatus);
                        cbDeliveryStatus.setSelectedItem(deliveryStatus);
                        cbOrderStatus.setSelectedItem(orderStatus);
                        
                        // Add a rows to the table with the selected products information from the Quotation record
                        Object[] rowData = {productID,productType,productName,productUnitPrice,quantity};
                        model.addRow(rowData);
                    }
                }
                    
            }
        } catch (IOException e) {
            System.out.println("IOException occured during loading old Sale Order data: " + e.getMessage());
        }
    }
    
    
    // Method to generate the next Sale Order No
    private String generateSaleOrderNo() {
        // Read the current Sale Order No number from the SaleOrderNo.txt 
        try (BufferedReader br = new BufferedReader(new FileReader("SaleOrderNo.txt"))) {
            String currentSaleOrderNo = br.readLine();
            int nextSaleOrderNo = Integer.parseInt(currentSaleOrderNo) + 1;  // Increment the current Quotation ID number
            
            // Write the updated Sale Order No number back to the SaleOrderNo.txt file
            try (BufferedWriter bw = new BufferedWriter(new FileWriter("SaleOrderNo.txt"))) {
            bw.write(String.valueOf(nextSaleOrderNo));
            }
            
            // Format the Sale Order No with leading zeros (e.g., S00001, S00002)
            String newSaleOrderNo = String.format("%05d", nextSaleOrderNo);
            
            // Generate the new Sale Order No
            String saleOrderNo = "S" + newSaleOrderNo;
            
            return saleOrderNo; 
        } catch (IOException e) {
            // Handle file reading error
            System.out.println("IOException occured during generating Quotation ID: " + e.getMessage());
        }
        return null;
    }
    
    // Method to generate the next Invoice No
    private String generateInvoiceNo() {
        // Read the current Invoice No number from the InvoiceNo.txt file
        try (BufferedReader br = new BufferedReader(new FileReader("InvoiceNo.txt"))) {
            String currentInvNo = br.readLine();
            int nextInvNo = Integer.parseInt(currentInvNo) + 1;  // Increment the current Invoice No number
            
            // Write the updated Invoice No number back to the InvoiceNo.txt file
            try (BufferedWriter bw = new BufferedWriter(new FileWriter("InvoiceNo.txt"))) {
            bw.write(String.valueOf(nextInvNo));
            }
            
            // Format the Invoice No with leading zeros (e.g., INV00001, INV00002)
            String newInvNo = String.format("%05d", nextInvNo);
            
            // Generate the new Invoice No
            String invoiceNO = "INV" + newInvNo;
            
            return invoiceNO; 
        } catch (IOException e) {
            // Handle file reading error
            System.out.println("IOException occured during generating Invoice No: " + e.getMessage());
        }
        return null;
    }
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageSaleOrderPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageSaleOrderPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageSaleOrderPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageSaleOrderPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManageSaleOrderPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGenerateInvoice;
    private javax.swing.JButton btnSave;
    private javax.swing.JComboBox<String> cbDeliveryStatus;
    private javax.swing.JComboBox<String> cbOrderStatus;
    private javax.swing.JComboBox<String> cbProductStatus;
    private com.toedter.calendar.JDateChooser dcCompletedDate;
    private com.toedter.calendar.JDateChooser dcDeliveryDate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea taDeliveryAddress;
    private javax.swing.JTable tbSelectedProduct;
    private javax.swing.JTextField tfCustomerName;
    private javax.swing.JTextField tfCustomerPhoneNo;
    private javax.swing.JTextField tfDeliveryFee;
    private javax.swing.JTextField tfDiscount;
    private javax.swing.JTextField tfInvoiceNo;
    private javax.swing.JTextField tfPurchaseOrderDate;
    private javax.swing.JTextField tfPurchaseOrderNo;
    private javax.swing.JTextField tfQuotationID;
    private javax.swing.JTextField tfSaleOrderNo;
    private javax.swing.JTextField tfSalespersonID;
    private javax.swing.JTextField tfSubtotal;
    private javax.swing.JTextField tfTotalAmount;
    private javax.swing.JTextField tfUsername;
    // End of variables declaration//GEN-END:variables
}
